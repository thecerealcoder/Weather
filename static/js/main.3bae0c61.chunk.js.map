{"version":3,"sources":["svg/clear.svg","svg/cloudy.svg","svg/drizzle.svg","svg/rain.svg","svg/snow.svg","svg/thunder.svg","components/Found.js","components/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","date","Date","momentDate","format","weatherType","Thunderstorm","id","data","thunder","type","Drizzle","drizzle","Rain","rain","Snow","snow","Mist","src","Smoke","Haze","Dust","Fog","Sand","Ash","Squall","Tornado","Clear","clear","Clouds","cloudy","Found","props","forecasts","forecastArray","forecast","daily","forecastHolder","i","length","forecastDate","add","days","className","weather","name","sys","country","Math","round","temp","day","main","min","checked","max","wind_speed","push","forecastBuilder","current","temp_min","temp_max","wind","speed","forecastDisplay","map","key","NotFound","api","process","App","useState","query","setQuery","setWeather","setForecast","setChecked","setFormat","linearGradient","getRandomValue","fetchData","coord","fetch","then","res","json","result","cod","lat","lon","floor","random","useEffect","document","body","style","backgroundImage","placeholder","onChange","ev","target","value","onKeyPress","evt","getElementById","display","Object","keys","uncheckedIcon","justifyContent","alignItems","height","fontSize","color","paddingRight","checkedIcon","Boolean","window","location","hostname","match","require","config","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3bae0c61.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clear.7f93fbdb.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy.ad789581.svg\";","module.exports = __webpack_public_path__ + \"static/media/drizzle.c8cdb216.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.d235ab65.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.67d63a14.svg\";","module.exports = __webpack_public_path__ + \"static/media/thunder.7142c78b.svg\";","import React from \"react\";\r\nimport Moment from \"react-moment\";\r\nimport Dragger from 'react-physics-dragger';\r\nimport { clear, cloudy, drizzle, rain, snow, thunder } from \"../svgLoader\";\r\n\r\nconst date = new Date();\r\nconst momentDate = <Moment format=\"MMMM Do YYYY\">{date}</Moment>;\r\n\r\nconst weatherType = \r\n{\r\n  Thunderstorm: <object id=\"svgObject\" data={thunder} type=\"image/svg+xml\"></object>,\r\n  Drizzle:<object id=\"svgObject\" data={drizzle} type=\"image/svg+xml\"></object>,\r\n  Rain:<object id=\"svgObject\" data={rain} type=\"image/svg+xml\"></object>,\r\n  Snow:<object id=\"svgObject\" data={snow} type=\"image/svg+xml\"></object>,\r\n  Mist:<img src=\"http://openweathermap.org/img/wn/50d@2x.png\"></img>,\r\n  Smoke:<img src=\"http://openweathermap.org/img/wn/50d@2x.png\"></img>,\r\n  Haze:<img src=\"http://openweathermap.org/img/wn/50d@2x.png\"></img>,\r\n  Dust:<img src=\"http://openweathermap.org/img/wn/50d@2x.png\"></img>,\r\n  Fog:<img src=\"http://openweathermap.org/img/wn/50d@2x.png\"></img>,\r\n  Sand:<img src=\"http://openweathermap.org/img/wn/50d@2x.png\"></img>,\r\n  Ash:<img src=\"http://openweathermap.org/img/wn/50d@2x.png\"></img>,\r\n  Squall:<img src=\"http://openweathermap.org/img/wn/50d@2x.png\"></img>,\r\n  Tornado:<img src=\"http://openweathermap.org/img/wn/50d@2x.png\"></img>,\r\n  Clear: <object id=\"svgObject\" data={clear} type=\"image/svg+xml\"></object>,\r\n  Clouds:<object id=\"svgObject\" data={cloudy} type=\"image/svg+xml\"></object>\r\n}\r\n\r\nfunction Found(props) {\r\n\r\nlet forecasts = [];  \r\n\r\n  \r\nfunction forecastBuilder() {\r\n  let forecastArray = props.forecast.daily;\r\n  let forecastHolder = \"\";\r\n  \r\n  for(let i = 0; i < forecastArray.length; i++) {\r\n    let forecastDate = <Moment format='dddd' add={{days: i}}>{date}</Moment>\r\n\r\n    forecastHolder = (\r\n    <div className=\"flex\">\r\n    <div className=\"weatherBox\">\r\n      <div id=\"date\">\r\n        {i==0 ? \"Today\" :forecastDate}\r\n      </div>\r\n      <div id=\"location\">\r\n        <p>\r\n          {props.weather.name}, {props.weather.sys.country}\r\n        </p>\r\n      </div>\r\n      <div id=\"weather\">\r\n        <p id=\"temp\">\r\n          {Math.round(forecastArray[i].temp.day)}\r\n          <span>°</span>\r\n        </p>\r\n        <div id=\"weathertype\">\r\n          {weatherType[`${forecastArray[i].weather[0].main}`]}\r\n          <p id=\"mainWeather\">\r\n            {forecastArray[i].weather[0].main}\r\n          </p>\r\n        </div>\r\n        <p>\r\n          <i className=\"fas fa-long-arrow-alt-down\"></i>\r\n          {Math.round(forecastArray[i].temp.min)}{props.checked ? \"°C\" : \"°F\"}\r\n           &#160;\r\n          <i className=\"fas fa-long-arrow-alt-up\"></i>\r\n          {Math.round(forecastArray[i].temp.max)}{props.checked ? \"°C\" : \"°F\"}\r\n        </p>\r\n        <p>\r\n          <i className=\"fas fa-wind\"></i>\r\n          {Math.round(forecastArray[i].wind_speed)}{props.checked ? \"m/s\" : \"mph\"}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  </div> );\r\n  forecasts.push(forecastHolder);\r\n  };\r\n}\r\n\r\n  if(props.format) forecastBuilder();\r\n\r\n\r\n  let current = (\r\n    <div className=\"flex\">\r\n      <div className=\"weatherBox\">\r\n        <div id=\"date\">\r\n          {momentDate}\r\n        </div>\r\n        <div id=\"location\">\r\n          <p>\r\n            {props.weather.name}, {props.weather.sys.country}\r\n          </p>\r\n        </div>\r\n        <div id=\"weather\">\r\n          <p id=\"temp\">\r\n            {Math.round(props.weather.main.temp)}\r\n            <span>°</span>\r\n          </p>\r\n          <div id=\"weathertype\">\r\n            <object id=\"svgObject\" data={cloudy} type=\"image/svg+xml\"></object>\r\n            <p id=\"mainWeather\">\r\n              {props.weather.weather[0].main}\r\n            </p>\r\n          </div>\r\n          <p>\r\n            <i className=\"fas fa-long-arrow-alt-down\"></i>\r\n            {Math.round(props.weather.main.temp_min)}{props.checked ? \"°C\" : \"°F\"}\r\n             &#160;\r\n            <i className=\"fas fa-long-arrow-alt-up\"></i>\r\n            {Math.round(props.weather.main.temp_max)}{props.checked ? \"°C\" : \"°F\"}\r\n          </p>\r\n          <p>\r\n            <i className=\"fas fa-wind\"></i>\r\n            {Math.round(props.weather.wind.speed)}{props.checked ? \"m/s\" : \"mph\"}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div> );\r\n\r\n    let forecastDisplay = (\r\n      <Dragger className=\"dragger\">\r\n        {forecasts.map((forecast, key) => \r\n        <div className=\"forecastContainer\">{forecast}</div>\r\n        )}\r\n      </Dragger> );\r\n\r\n  return (\r\n    <div>\r\n      {props.format ?  forecastDisplay : current}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Found","import React from \"react\"\r\n\r\nfunction NotFound() {\r\n    return(\r\n        <div className=\"flex\">\r\n             <div id=\"notFound\">\r\n                Location not found\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound","import React, { useEffect, useState } from 'react';\nimport Found from \"./components/Found\";\nimport NotFound from \"./components/NotFound\";\nimport Switch from \"react-switch\";\n\n\n\nconst api = {\n  key: process.env.REACT_APP_API_KEY,\n  weather: \"https://api.openweathermap.org/data/2.5/weather?q=\",\n  forecast: \"https://api.openweathermap.org/data/2.5/onecall?\"\n}\n\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const [forecast, setForecast] = useState({});\n  const [checked, setChecked] = useState(false);\n  const [format, setFormat] = useState(false);\n\n  let linearGradient = `linear-gradient(to bottom, rgba(${getRandomValue()},${getRandomValue()},${getRandomValue()},1), \n                        rgba(${getRandomValue()},${getRandomValue()},${getRandomValue()},1))`;\n\n  useEffect(() => {\n    if (query) {\n      fetchData();\n    } else {\n      document.body.style.backgroundImage = linearGradient;\n    }\n  }, [checked]);\n\n  function fetchData() {\n    let coord = {};\n    fetch(`${api.weather}${query}&units=${checked ? \"metric\" : \"imperial\"}&appid=${api.key}`)\n      .then(res => res.json())\n      .then(result => {\n        if (result.cod === \"404\") {\n          setWeather(result);\n          return;\n        }\n        coord = result.coord;\n        setWeather(result);\n        fetch(`${api.forecast}lat=${coord.lat}&lon=${coord.lon}&exclude=minutely,hourly,current&units=${checked ? \"metric\" : \"imperial\"}&appid=${api.key}`)\n          .then(res => res.json())\n          .then(result => {\n            setForecast(result);\n          });\n      });\n  }\n\n  function getRandomValue() {\n    let randomValue = Math.floor(Math.random() * 100) + 155;\n    return randomValue;\n  }\n\n  function handleChange(evt) {\n    if ((evt.key) === \"Enter\") {\n      if(document.getElementById(\"welcome\")) document.getElementById(\"welcome\").style.display = \"none\";\n      document.body.style.backgroundImage = linearGradient;\n      fetchData();\n    }\n  }\n  \n  function handleTemp(evt) {\n    setChecked(!checked);\n  }\n\n  function handleFormat(evt) {\n    setFormat(!format);\n  }\n\n  return (\n    <div className=\"app\">\n      <main>\n        <div className=\"searchBox\">\n          <input\n            type=\"text\"\n            id=\"searchBar\"\n            placeholder=\"Enter your city...\"\n            onChange={ev => setQuery(ev.target.value)}\n            onKeyPress={handleChange}\n            value={query}\n          />\n        </div>\n\n        <div id=\"welcome\">\n          <h1>Welcome to Flowly!</h1>\n          <h2>Search for your city to get real time weather as well as a weekly forecast for your location.</h2>\n        </div>\n\n\n        {Object.keys(weather).length !== 0 &&\n\n          <div>\n\n            <div className=\"sliderContainer\">\n              <div className=\"units\">\n                <p>Units</p>\n                <Switch onChange={handleTemp} checked={checked}\n                  uncheckedIcon={<div style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    height: \"100%\",\n                    fontSize: 16,\n                    color: \"white\",\n                    paddingRight: 2\n                  }}>°F</div>}\n                  checkedIcon={<div style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    height: \"100%\",\n                    fontSize: 16,\n                    color: \"white\",\n                    paddingRight: 2\n                  }}>°C</div>}\n                />\n              </div>\n              <div className=\"format\">\n                <p>Forecast</p>\n                <Switch onChange={handleFormat} checked={format}\n                  uncheckedIcon={<div></div>}\n                  checkedIcon={<div></div>}\n                />\n              </div>\n            </div>\n\n\n            {weather.cod === \"404\" ?\n\n              (\n                <NotFound />\n              ) : (\n                <Found weather={weather} checked={checked} forecast={forecast} format={format} />\n              )\n            }\n          </div>\n        }\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nrequire('dotenv').config();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}